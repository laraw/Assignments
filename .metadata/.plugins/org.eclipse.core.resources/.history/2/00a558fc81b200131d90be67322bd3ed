package fleet.model;

import java.util.ArrayList;

/**
 * 
 * Programming 2, Week 3, Fleet Management System Date: 05-08-2010
 * 
 * <b> Fleet </b>
 */
public class Fleet {

	private ArrayList<Job> jobs;
	private ArrayList<Vehicle> vehicles;

	/**
	 * 
	 */
	public Fleet() {
		vehicles = new ArrayList<Vehicle>();
		jobs = new ArrayList<Job>();
	}

	/**
	 * Add a vehicle to the fleet
	 * 
	 * @param v
	 */
	public void addVehicle(Vehicle v) {
		vehicles.add(v);
	}

	/**
	 * Display All Scheduled Jobs in the fleet
	 */
	public void displayAllJobs() {
		for (Job j : jobs) {
			System.out.println(j);
		}
	}

	/**
	 * Display All Vehicles in the fleet
	 */
	public void displayAllVehicles() {
		for (Vehicle v : vehicles) {
			System.out.println(v);
		}
	}

	/**
	 * Display details of a specified job
	 * 
	 * @param jobID
	 */
	public void displayJobInfo(String jobID) {
		Job j = getJob(jobID);
		if (j != null)
			System.out.println(j);
	}

	/**
	 * Display details of a specified vehicle
	 * 
	 * @param regNo
	 */
	public void displayVehicleInfo(String regNo) {
		Vehicle v = getVehicle(regNo);
		if (v != null)
			System.out.println(v);
	}

	/**
	 * @param jobID
	 * @return Job associated with the specified jobID
	 */
	public Job getJob(String jobID) {
		for (Job j : jobs) {
			if (j.getID().equals(jobID))
				return j;
		}
		return null;
	}

	/**
	 * Service the vehicle corresponding to the specified registrationNo
	 * 
	 * @param regNo
	 */
	public void serviceVehicle(String regNo) {
		Vehicle toService = getVehicle(regNo);
		if (toService != null)
			toService.service();
	}

	/**
	 * @param regNo
	 * @return Vehicle associated with the specified regNo
	 */
	public Vehicle getVehicle(String regNo) {
		for (Vehicle v : vehicles) {
			if (v.getRegNo().equals(regNo))
				return v;
		}
		return null;
	}

	/**
	 * Creates a job and schedules it to the specified vehicle if traveling the
	 * required distance does not violate the vehicle's maintenance requirements
	 * 
	 * @param distance
	 * @param regNo
	 * @return
	 */
	public boolean scheduleJob(double distance, String regNo) {
		Vehicle vehicleToAssign = getVehicle(regNo);
		if (vehicleToAssign == null || !vehicleToAssign.canTravel(distance))
			return false;

		String jobID = "job" + jobs.size();
		jobs.add(new Job(jobID, distance, vehicleToAssign, vehicleToAssign
				.calculateWearAndTear(distance)));
		vehicleToAssign.travel(distance);
		return true;
	}
}