/** 
Assignment 1, Programming 2, RMIT University. 
Author: Lara Wilkinson, s3342496
Date: 04/02/2014

Description:  The Abstract Member provides a blueprint for the properties and behaviours of all types of Library members.
**/

package lms.model;
import java.util.ArrayList;
import lms.model.exception.*;
import lms.model.util.DateUtil;

public abstract class AbstractMember implements Member {

	private String memberID;
	private String fullname;
	
	// A member has a borrowing history, which is a collection of holdings.
	
	private BorrowingHistory history = new BorrowingHistory();
	
	// A member also has a collection of currently borrowed holdings.
	
	private ArrayList<Holding> currentholdings = new ArrayList<Holding>();
	private int credit;
	private int maxcredit;
	
	public AbstractMember() {
	}
	

	public AbstractMember(String memberID, String fullname, int credit, int maxcredit) {
		this.memberID = memberID;
		this.fullname = fullname;
		this.credit = credit;
		this.maxcredit = maxcredit;
	}
	
	
	// 
	
	public void borrowHolding(Holding holding) throws LMSException {	
				
		if (history.getHistoryRecord(holding.getCode()) != null) {
			throw new MultipleBorrowingException("This holding has already been borrowed and cannot be borrowed again");
		}
		
		else if (this.credit < holding.getDefaultLoanFee()) {
			throw new InsufficientCreditException("Member does not have sufficient credit");
		}
		
		
		else {
			holding.onLoan(true);
			currentholdings.add(holding);
			this.credit -= holding.getDefaultLoanFee();
			holding.setBorrowDate(DateUtil.getInstance().getDate());
		
		}
		
		
	};
	

	public int calculateRemainingCredit() {
		return credit;
	};


	@Override
	public BorrowingHistory getBorrowingHistory() {
		return history;
	}

	@Override
	public ArrayList<Holding> getCurrentHoldings() {
		return currentholdings;
	}

	@Override
	public String getFullName() {
		return fullname;
	}

	@Override
	public abstract int getMaxCredit();

	@Override
	public String getMemberId() {
		return memberID;
	}

	@Override
	public void resetCredit() {	
		credit = maxcredit;
	};
	
	@Override
	public abstract void returnHolding(Holding holding) throws LMSException;
	
	public String toString() {
		return memberID+":"+fullname+":";
	}
	
	public void deductLateFee (int latefee) {
		this.credit -= latefee;
	}

}
